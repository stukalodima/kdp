#
# Copyright (c) 2008-2019 Haulmont.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
menu-config.reports=Звіти
menu-config.report$Report.browse=Звіти
menu-config.report$Report.run=Запуск звітів
menu-config.report$ReportGroup.browse=Групи звітів
menu-config.report$showChart=Відображення діаграм
menu-config.report$showReportTable=Показати таблицю
menu-config.report$showPivotTable=Показати зведену таблицю

actions.Report=Звіт
actions.ListPrintForm = Запустити звіти
actions.RunReport = Запустити звіт
actions.ExecutionHistory = Історія виконання

reportException.failedConnectToOffice=Неможливо підключитися до LibreOffice
reportException.noOpenOfficeFreePorts=Неможливо підключитися до LibreOffice. Відсутні вільні порти.
reportException.message=Під час генерації звіту виникла помилка
reportException.unableToImportReport=Неможливо імпортувати звіти
reportException.wrongFileType=Неправильний тип файлу: %s. Очікується ZIP.
reportException.noFile=Завантажте файл

inputParameters=Введення параметрів звіту
reportBrowser=Звіти
parameterEditor=Редактор параметрів
reportEditor=Редактор звіту
reportEditor.format = Редактор звіту "%s"
bandDefinitionEditor=Редактор смуги
reportGroupBrowser=Групи звітів
reportGroupEditor=Група звітів
localeCaption=Рядки локалізації
groupLocaleCaption=Локалізація
groupProperties=Група звітів

report.new=Новий
report.bands=Смуги звіту
report.bandDetails=Властивості смуги
report.templateMsg=Основний шаблон не заданий
report.restAccess=Доступний для REST API
report.system=Системний

report.reportRunFilterUpdatedDate=Оновлено після
report.reportRunFilterCode=Код
report.reportRunFilterGroup=Група
report.reportRunFilterName=Ім'я
report.reportFilterButton=Пошук
report.reportClearButton=Очистити
report.validationScriptOn=Скрипт валідації включений
report.validationScriptOff=Скрипт валідації

definition.name=Ім'я
definition.orientation=Орієнтація
definition.parentBand=Батько

dataSet.name = Ім'я набору даних
dataSet.type=Тип набору даних
dataSet.text=Скрипт
dataSet.fullScreen=На весь екран
dataSet.urlJsonSource=URL
dataSet.urlJsonSourceMessage=URL не встановлено
dataSet.jsonSourceType=Джерело JSON
dataSet.jsonParameter=Параметр
dataSet.jsonPathQueryText=JSON path запит не вказано
dataSet.linkParameterName=Поле зв'язування
dataSet.jsonPathQuery=JSON path запит
dataSet.entityParamName=Ім'я параметра для пов'язаної сутності
dataSet.entitiesParamName=Ім'я параметра для списку сутностей
dataSet.editView=Вибрати атрибути сутності
dataSet.dataStore=Сховище даних
dataSet.useExistingView=Використовувати існуюче уявлення (view)
dataSet.viewName=Ім'я подання (view)
dataSet.entityAliasNull=Значення параметра не вказано
dataSet.entityAliasInvalid=Неправильний параметр з іменем [%s].
dataSet.cantFindCollectionProperty=Не знайдено спискову властивість %s для сутності %s
dataSet.entityWasChanged=Сутність змінена. Відкрито екран редагування доступних полів для нової сутності %s
dataSet.processTemplate=Зробити запит як Groovy шаблон
dataSet.dataStoreMain=Основний
dataSet.textHelp=Тут можна встановити Groovy-скрипт, який формує набір даних. У скрипт передаються\
  </br>наступні змінні:\
  <ul>\
  <li><code>params</code> - меп зовнішніх параметрів звіту</li>\
  <li><code>parentBand</code> - батьківська смуга у вигляді об'єкта типу <code>BandData</code></li>\
  <li><code>persistence</code> - об'єкт типу <code>Persistence</code>, що дозволяє керувати транзакціями\
  </br>і отримувати посилання <code>EntityManager</code></li>\
  <li><code>dataManager</code> - об'єкт типу <code>DataManager</code>, що дозволяє виконувати завантаження та збереження\
  </br>змін графів сутностей</li>\
  <li><code>metadata</code> - об'єкт типу <code>Metadata</code>, що дозволяє звертатися до метаданих додатків</li>\
  <li><code>security</code> - об'єкт типу <code>Security</code>, який перевіряє права користувача\
  </br>на різні об'єкти системи\
  <li><code>userSession</code> - об'єкт типу <code>UserSession</code>, асоційований з автентифікованим\
  </br>в даний момент в системі користувачем\
  <li><code>userSessionSource</code> - об'єкт типу <code>UserSessionSource</code>, який забезпечує отримання об'єкта\
  На сесії поточного користувача\
  <li><code>timeSource</code> - об'єкт типу <code>TimeSource</code>, який забезпечує отримання поточного часу</li>\
  <li><code>transactional</code> - метод, який приймає на вхід замикання, яке потрібно виконати в \
  <br>нової транзакції. Параметром замикання стає поточний <code>EntityManager</code></li>\
  <ul>\
  
dataSet.jsonSourceGroovyCodeHelp=Тут можна встановити Groovy-скрипт, який повертає JSON рядок. У скрипт передаються\
  </br>наступні змінні:\
  <ul>\
  <li><code>params</code> - меп зовнішніх параметрів звіту</li>\
  <li><code>parentBand</code> - батьківська смуга у вигляді об'єкта типу <code>BandData</code></li>\
  <li><code>persistence</code> - об'єкт типу <code>Persistence</code>, що дозволяє керувати транзакціями\
  </br>і отримувати посилання <code>EntityManager</code></li>\
  <li><code>dataManager</code> - об'єкт типу <code>DataManager</code>, що дозволяє виконувати завантаження та збереження\
  </br>змін графів сутностей</li>\
  <li><code>metadata</code> - об'єкт типу <code>Metadata</code>, що дозволяє звертатися до метаданих додатків</li>\
  <li><code>security</code> - об'єкт типу <code>Security</code>, який перевіряє права користувача\
  </br>на різні об'єкти системи\
  <li><code>userSession</code> - об'єкт типу <code>UserSession</code>, асоційований з автентифікованим\
  </br>в даний момент в системі користувачем\
  <li><code>userSessionSource</code> - об'єкт типу <code>UserSessionSource</code>, який забезпечує отримання об'єкта\
  На сесії поточного користувача\
  <li><code>timeSource</code> - об'єкт типу <code>TimeSource</code>, який забезпечує отримання поточного часу</li>\
  <li><code>transactional</code> - метод, який приймає на вхід замикання, яке потрібно виконати в \
  <br>нової транзакції. Параметром замикання стає поточний <code>EntityManager</code></li>\
  <ul>\
  
dataSet.jsonPathQueryHelp=Тут можна вказати JSON path для обходу дерева JSON.\
  <p>Example:</p>\
  Маючи наступну JSON структуру, ми можемо вибрати всі книги, використовуючи скрипт <strong>$.store.book[*]</strong>\
  <br>\
  <code>\
            {<br>\
             &nbsp "store": {<br>\
             &nbsp &nbsp "book": [<br>\
             &nbsp &nbsp &nbsp {<br>\
             &nbsp &nbsp &nbsp &nbsp "категорія": "reference",<br>\
             &nbsp &nbsp &nbsp &nbsp "author": "Nigel Rees",<br>\
             &nbsp &nbsp &nbsp &nbsp "title": "Sayings of the Century",<br>\
             &nbsp &nbsp &nbsp &nbsp "price": 8.95<br>\
             &nbsp &nbsp &nbsp },<br>\
             &nbsp &nbsp &nbsp {<br>\
             &nbsp &nbsp &nbsp &nbsp "категорія": "fiction",<br>\
             &nbsp &nbsp &nbsp &nbsp "author": "Evelyn Waugh",<br>\
             &nbsp &nbsp &nbsp &nbsp "title": "Sword of Honour",<br>\
             &nbsp &nbsp &nbsp &nbsp "price": 12.99,<br>\
             &nbsp &nbsp &nbsp &nbsp "isbn": "0-553-21311-3"<br>\
             &nbsp &nbsp &nbsp }<br>\
             &nbsp &nbsp ],<br>\
             &nbsp &nbsp "bicycle": {<br>\
             &nbsp &nbsp &nbsp "color": "red",<br>\
             &nbsp &nbsp &nbsp "price": 19.95<br>\
             &nbsp &nbsp }<br>\
             &nbsp }<br>\
            }<br>\
  </code>\
  <br>\
  Для більш складних прикладів зверніться до документації JSON path.

scriptEditorDialog.captionFormat=Редактор скрипта %s > %s

generalFrame.createBandDefinition=Створити
generalFrame.removeBandDefinition=Видалити
generalFrame.up=Вгору
generalFrame.down=Вниз

templateEditor.uploadSuccess=Файл завантажений
templateEditor.uploadUnsuccess=Файл не був завантажений через помилку
templateEditor.classRequired=Вкажіть визначення
templateEditor.customDefinedBy=Вкажіть тип визначення звіту
templateEditor.warning=Попередження
templateEditor.clearTemplateMessage=Текст шаблону буде видалено після збереження
templateEditor.titleHelpGroovy=Groovy шаблон
templateEditor.textHelpGroovy=Тут можна встановити Groovy-скрипт, який формує шаблон. У скрипт передаються\
  </br>наступні змінні:\
  <ul>\
  <li><code>params</code> - зовнішні параметри звіту</li>\
  <li><code>rootBand</code> - коренева смуга у вигляді об'єкта типу <code>BandData</code></li>\
  <ul>\
  

securityFrame.roles=Ролі
securityFrame.screens=Екрани

roles.roleName=Роль

screens.createScreen=Додати екран
screens.removeScreen=Видалити екран
screens.screenId=Ідентифікатор екрану

parameters.caption=Напис
parameters.type=Тип параметра
parameters.alias=Аліас параметра
parameters.metaClass=Сутність
parameters.screen=Екран вибору сутності
parameters.defaultValue=Значення за замовчуванням
parameters.required=Обов'язковий параметр?
parameters.lookup=Випадаючий список
parameters.lookupHelp=Додає можливість вибирати значення параметра зі списку. \
  Ви можете налаштувати where та join обмеження для списку на вкладці "Випадаючий список".
parameters.hidden=Прихований
parameters.predefinedTransformation=Існуюча трансформація
parameters.validateFields=Валідувати
parameters.crossFieldValidate=Валідувати
parameters.groovyScript=Groovy скрипт
parameters.wildcards=Wildcards
parameters.nameMsg=Заповніть поле "Ім'я параметра"
parameters.typeMsg=Заповніть поле "Тип параметра"
parameters.aliasMsg=Заповніть поле "Аліас параметра"
parameters.defaultDateIsCurrent=Поточна дата(час)\nза замовчуванням

parametersAndFormatsTab=Параметри та формати
templatesTab=Шаблони
generalTab=Структура звіту
securityTab=Ролі та екрани
localesTab=Локалізація

button.import=Імпортувати
button.run=Виконати

report.nameMsg=Заповніть поле "Ім'я звіту"
report.reportTypeMsg=Заповніть поле "Тип звіту"
report.parameters=Параметри
report.crossParametersValidation=Крос валідація параметрів

valuesFormats.name=Ім'я вихідного параметра
valuesFormats.format=Рядок форматування
valuesFormats.groovyScript = Groovy скрипт
valuesFormats.groovyScriptHelpText=Тут можна встановити Groovy-скрипт для форматування параметрів, який повертає рядок. Скрипт передається\
  </br>змінна <code>value</code>, яку можна відформатувати або перетворити за допомогою groovy-script.\
  <br/>\
  <br/>Наприклад:\
  <br/><code>return "Результат: " + value</code>\
  
formatsEdit=Формат для значення
report.valuesFormats=Формати значень
report.wizard=За допомогою конструктора
valueNameMsg=Заповніть поле "Ім'я вихідного параметра"
formatStringMsg=Заповніть поле "Формати значень"
groovyScriptMsg=Заповніть поле "Groovy скрипт"
roles.addRole=Додати роль
roles.removeRole=Видалити роль
parameters.enum=Перерахування
parameters.requiredMetaClass=Вкажіть "Сутність" для параметра
parameters.requiredEnumClass=Вкажіть "Перерахування" для параметра
report.templates=Шаблони
templateEditor=Редактор шаблону

fileUploadDialog.caption=Надсилання файлу

template.code=Код шаблону
template.outputType=Тип виводу
template.file=Файл шаблону
template.outputNamePattern=Ім'я вихідного файлу
template.typeForHtml=Тип шаблону
template.groovyType=Шаблон Groovy
template.freemarkerType=Шаблон Freemarker
template.isCustom=Спеціальний шаблон
template.customDefinedBy=Тип визначення
template.customDefinition=Визначення
template.isAlterableOutput=Змінний тип виводу
template.alterable=Змінний
template.namePatternText=Ім'я вихідного файлу
template.namePatternTextHelp=Необов'язкове ім'я файлу, яке буде використовуватися для вивантаження готового звіту. \
  Паттерн імені файлу може бути як постійним рядком, так і містити параметри звіту як змінні, наприклад:\
  <center><code>${header.authorName}.xlsx</code></center>\
  <br>Складніші патерни з кількома параметрами та конкатенацією \
  рядків також можна створити скриптом у будь-якій смузі в структурі звіту, наприклад:\
  <center><code>${Root.title}.xlsx</code></center>\
  <br>де <code>title</code> є результатом наступного скрипту:\
  <center><br><code>[['title' : ('Report for ' + params['author'].firstName\
  <br>+ ' ' + params['author'].lastName)]]</code></center>

template.band=Смуга даних
template.column=Колонка
template.columnName=Назва колонки
template.tableParameters=Параметри таблиці
template.bandRequired=Будь ласка, виберіть смугу
template.bandTableOrColumnTableRequired=Таблиця стовпчиків або таблиця смуг має порожні поля

report.defaultTemplate=Зробити головним
template.codeMsg=Вкажіть код шаблону
template.copyNamingPattern=%s копія
template.outputTypeMsg=Вкажіть тип виводу
template.uploadTemplate=Завантажте файл шаблону
unableToDeleteSystemReportGroup=Неможливо видалити системну групу звітів
unableToDeleteNotEmptyReportGroup=Неможливо видалити групу, яка має звіти
unableToSaveTemplateWhichDefinedWithClass=Неможливо зберегти шаблон, визначений класом
parameters.localesTab=Локалізація
parameters.optionsTab=Властивості
parameters.transformationTab=Трансформація
parameters.validationTab=Волідація
parameters.lookupSettingsTab=Випадаючий список
parameters.lookupJoin=Оператор Join
parameters.lookupWhere=Оператор Where
parameters.lookupJoinHelp=Значення даного поля додається у вираз "from" запиту. Воно повинне починатися з комою або слів "join" або "left join".\
  <br/>В якості аліасу сутності необхідно використовувати рядок {E}. При виконанні запитів її буде замінено на реальний аліас, заданий у запиті.\
  <br/>\
  <br/>Наприклад:\
  <br/><code>join {E}.seller s</code>
parameters.lookupWhereHelp=Значення даного поля додається у вираз "where" запиту за умовою "and" (І). Саме слово "where" писати не потрібно, воно буде додано автоматично, навіть якщо вихідний запит не містив.\
  <br/>В якості аліасу сутності необхідно використовувати рядок {E}. При виконанні запитів її буде замінено на реальний аліас, заданий у запиті.\
  <br/>\
  <br/>Наприклад:\
  <br/><code>{E}.salary > 1000 and {E}.department = 'abc'</code>

report.browser.showExecutions = Історія виконання
report.executionHistory.caption = Історія виконання
report.executionHistory.byReport = Історія виконання "%s"
report.executionHistory.download = Завантажити документ

duration.format.withHours = %s год %s хв %s сек
duration.format.withMinutes = %s хв %s сік
duration.format.onlySeconds = %s сік

error.rootBandNull=Не встановлено коренева смуга
error.bandNameNull=Ім'я смуги не задано
error.bandOrientationNull=Не задана орієнтація смуги [%s]
error.dataSetNameNull=Ім'я набору даних не задано
error.dataSetTypeNull=Не вказано тип набору даних [%s]
error.dataSetScriptNull=Скрипт набору даних не заданий [%s]
error.jsonDataSetScriptNull=Не встановлено groovy скрипт - джерело набору даних [%s]
error.bandNamesDuplicated=Порушена унікальність імені смуги [%s]

actions.printAll=Всі
actions.printSelected=Вибрані рядки

notification.defaultTemplateIsEmpty=Основний шаблон не встановлено
notification.fileIsNotAllowedForSpecificTypes=Неможливо зберегти файл шаблону для діаграми/таблиці/зведеної таблиці
notification.selectReport=Будь ласка, виберіть звіт
notifications.confirmPrintAllheader=Підтвердження
notifications.confirmPrintAll=Ви дійсно хочете роздрукувати звіт за всіма даними?
notifications.confirmPrintSelected=Які дані використовувати для звіту?
notifications.confirmPrintSelectedheader=Виберіть варіант
notifications.noSelectedEntity=Не вибрані дані для звіту

export=Експортувати
copy=Копіювати
runReport=Виконати

description.downloadTemplate=Завантажити шаблон
description.uploadTemplate=Завантажити шаблон на сервер
description.createTemplate=Створити шаблон
description.editTemplate=Редагувати шаблон

description.createBand=Створити смугу
description.removeBand=Видалити смугу
description.moveUp=Зрушити смугу вгору
description.moveDown=Зрушити смугу вниз

description.createDataSet=Створити набір даних
description.removeDataSet=Видалити набір даних

runReportBackgroundTitle = Запуск звіту
runReportBackgroundMessage = Будь ласка, зачекайте, чи йде генерація звіту

inputOutputTypesError=Тип файлу шаблону та тип виводу звіту не сумісні
caption.preview=Перегляд
caption.category=Категорія

IDX_REPORT_GROUP_UNIQ_TITLE=Група звітів з таким ім'ям вже існує
IDX_REPORT_REPORT_UNIQ_NAME=Звіт з таким ім'ям вже існує

chartEdit.series=Ряд даних
chartEdit.seriesEmptyMsg=Вкажіть хоча б один ряд даних
chartEdit.seriesTypeNullMsg=Вкажіть тип відображення для ряду даних
chartEdit.seriesValueFieldNullMsg=Вкажіть поле зі значеннями для ряду даних
chartEdit.jsonConfig=JSON конфігурація
chartEdit.invalidJson=Неправильна JSON конфігурація
chartEdit.serialJsonConfigHelp=Тут можна задати додаткову JSON конфігурацію для діаграми з рядами.\
  <br/>Наприклад:\
  </br><code>{\
  <br/>&nbsp "theme": "dark",\
  <br/>&nbsp &nbsp "backgroundAlpha": 1,\
  <br/>&nbsp &nbsp "backgroundColor": "black",\
  <br/>&nbsp &nbsp "startDuration": 1,\
  <br/>&nbsp &nbsp "depth3D": 20,\
  <br/>&nbsp &nbsp "angle": 30,\
  <br/>&nbsp &nbsp "graphs": [{\
  <br/>&nbsp &nbsp &nbsp &nbsp "fillAlphas": 1,\
  <br/>&nbsp &nbsp &nbsp &nbsp "lineAlpha": 1,\
  <br/>&nbsp &nbsp &nbsp &nbsp "fillColors": ["#f12711", "#f5af19"],\
  <br/>&nbsp &nbsp &nbsp &nbsp "lineColor": "black",\
  <br/>&nbsp &nbsp &nbsp &nbsp "balloonColor": "#f12711"\
  <br/>&nbsp &nbsp }]\
  <br/>}</code>\
  </br>Зверніть увагу, що ця конфігурація може перевизначити конфігурацію, яка автоматично генерується в звітах API.
chartEdit.pieJsonConfigHelp=Тут можна задати додаткову JSON конфігурацію для кругової діаграми.\
  <br/>Наприклад:\
  </br><code>{\
  <br/>&nbsp "theme": "dark",\
  <br/>&nbsp &nbsp "backgroundAlpha": 1,\
  <br/>&nbsp &nbsp "backgroundColor": "black",\
  <br/>&nbsp &nbsp "depth3D": 20,\
  <br/>&nbsp &nbsp "angle": 40,\
  <br/>&nbsp "colors": [\
  <br/>&nbsp &nbsp &nbsp &nbsp "#0dffdc",\
  <br/>&nbsp &nbsp &nbsp &nbsp "#00c6eb",\
  <br/>&nbsp &nbsp &nbsp &nbsp "#0091ff",\
  <br/>&nbsp &nbsp &nbsp &nbsp "#0c4ae8",\
  <br/>&nbsp &nbsp &nbsp &nbsp "#1111fa"\
  <br/>&nbsp &nbsp ]\
  <br/>}</code>\
  </br>Зверніть увагу, що ця конфігурація може перевизначити конфігурацію, яка автоматично генерується в звітах API.

pivotTableEdit.bandRequired=Заповніть ім'я смуги
pivotTableEdit.rendererRequired=Заповніть малюнок за замовчуванням
pivotTableEdit.aggregationsRequired=Заповніть агрегацію даних
pivotTableEdit.propertiesRequired=Заповніть поля, що використовуються.
pivotTableEdit.aggregationPropertiesRequired=Заповніть поля агрегації
pivotTableEdit.columnsOrRowsRequired=Заповніть поля рядка або стовпчика
pivotTableEdit.propertyIntersection=Поля не повинні перетинатися
pivotTableEdit.uniqueAggregationOptionCaption=Найменування агрегації даних має бути унікальним

validationScript=Скрипт валідації
validationScriptHelp=\ Тут ви можете задати Groovy-script, що перевіряє значення параметра звіту.\
  <code>invalid(String str)</code> може бути використаний для того, щоб видати повідомлення про помилку валідації користувачу.\
  <br/> Скрипт повинен перевірити значення параметра value і викликати метод invalid(), якщо значення не валідно.\
  <br/>\
  <code> Наприклад, <code>invalid('Неправильний параметр')</code> видасть відповідне повідомлення у разі невідповідного параметра для виконання звіту.\
  <br/>\
   У скрипт передаються такі змінні:\
  <ul>\
  <li><code>value</code> - значення параметра, введеного користувачем</li>\
  <li><code>dataManager</code> - об'єкт типу <code>DataManager</code>, що дозволяє виконувати завантаження та збереження\
  </br>змін графів сутностей</li>\
  <li><code>metadata</code> - об'єкт типу <code>Metadata</code>, що дозволяє звертатися до метаданих додатків</li>\
  <li><code>security</code> - об'єкт типу <code>Security</code>, який перевіряє права користувача\
  </br>на різні об'єкти системи\
  <li><code>userSession</code> - об'єкт типу <code>UserSession</code>, асоційований з автентифікованим\
  </br>в даний момент в системі користувачем\
  <li><code>invalid</code> - groovy closure яка якщо викликана у скрипті провалює валідацію\
  <ul>\
  
crossFieldValidationScriptHelp=\ Тут ви можете встановити Groovy-script, призначений для перехресної перевірки значень параметрів до запуску звіту.\
  <code>invalid(String str)</code> може бути використаний для того, щоб видати повідомлення про помилку валідації користувачу.\
  <br/> Скрипт повинен провести перехресну перевірку параметрів та викликати метод invalid(), якщо значення параметрів не пройшли перевірку.\
  <br/>\
  <code> Наприклад, <code>invalid('Дата початку повинна бути до дати закінчення')</code> видасть відповідне повідомлення у випадку \
  якщо значення "Дата старту" далі у часі, ніж значення параметра "Дата закінчення". \
  <br/>\
   У скрипт передаються такі змінні:\
  <ul>\
  <li><code>params</code> - меп зовнішніх параметрів звіту</li>\
  <li><code>dataManager</code> - об'єкт типу <code>DataManager</code>, що дозволяє виконувати завантаження та збереження\
  </br>змін графів сутностей</li>\
  <li><code>metadata</code> - об'єкт типу <code>Metadata</code>, що дозволяє звертатися до метаданих додатків</li>\
  <li><code>security</code> - об'єкт типу <code>Security</code>, який перевіряє права користувача\
  </br>на різні об'єкти системи\
  <li><code>userSession</code> - об'єкт типу <code>UserSession</code>, асоційований з автентифікованим\
  </br>в даний момент в системі користувачем\
  <li><code>invalid</code> - groovy closure яка якщо викликана у скрипті провалює валідацію\
  <ul>\
 
<br/> Наприклад, <code>invalid('Неправильний параметр')</code> видасть відповідне повідомлення у разі невідповідного параметра для виконання звіту.
report.localeTextHelp=Тут можна задати назву звіту. У списку звітів для запуску звіту\
  <br/>відображатиметься з назвою мовою, з якою користувач увійшов у\
  <br/>систему. Введіть в рядках текстового поля пари:</code>\
  <code>code>ім'я_локалі = назва_звіту</code>.\
  <br/>\
  <br/>Наприклад:\
  <br/><code>en = Books by author</code>\
  <br/><code>ua = Книги з автора</code>
parameter.localeTextHelp=Тут можна визначити назви параметра для різних локалей.\
  <br/>Для цього в окремих рядках текстового поля слід запровадити пари\
  <code>code>ім'я_локалі = назва_звіту</code>.\
  <br/>\
  <br/>Наприклад:\
  <br/><code>en = Book</code>\
  <br/><code>ua = Книга</code>
parameter.transformationScriptHelp=Тут можна визначити скрипт Groovy для перетворення параметра\
   <br/>перед використанням його у звіті. Скрипт Groovy має повертати\
   <br/>нове значення параметра. Поточне значення доступне за аліасом\
   <br/><code>paramValue</code>, меп параметрів можна отримати за допомогою аліасу <code>params</code>.\
   <br/>\
   <br/>Наприклад:\
   <br/><code>return "%" + paramValue + "%"</code>\
  
templateEditor.HighlightActiveLine=Показувати поточний рядок
templateEditor.PrintMargin=Кордон друку
templateEditor.ShowGutter=Номери рядків

scriptEditor = Редактор
localeText = Локалізація
transformationScript = Трансформація

pivotTable.rendererOptions=Налаштування малювання
pivotTable.aggregationOptions=Налаштування агрегації даних
pivotTable.defaultAggregation=Агрегація за замовчуванням
pivotTable.propertiesOptions=Використовувані поля
pivotTable.customOptions=Налаштування користувача
pivotTable.customFunctions=Перевизначені функції
pivotTable.customC3properties=Налаштування C3 графіка
pivotTable.customHeatmapProperties=Налаштування теплової картки

pivotTableAggregationEditor=Редактор агрегації даних
pivotTablePropertyEditor=Редактор поля

pivotTable.functionHelpCaption=Скрипт
pivotTable.propertyFunctionHelp=Функція JavaScript може бути використана для додавання нового поля\
  <br/>в таблицю, обчисленого виходячи з існуючих полів. Аргументом \
  <br/>функції є об'єкт з усіма значеннями існуючих полів.\
  <br/>Функція повертає обчислене значення поля.\
  <br/>\
  <br/>Наприклад:\
  <br/>\
  <br/><code>function(record) {\
  <br/>&nbsp &nbsp return record.Age - record.Age % 10;\
  <br/>}</code>
pivotTable.aggregationFunctionHelp=Функція JavaScript може бути використана для створення власного\
  <br/>агрегації. Функція викликається для кожного осередку таблиці та повертає \
  <br/>об'єкт із такими ключами:\
  <ul>\
  <li><code>push</code> - функція, що розраховує агрегацію, викликається для кожної \
  <br/>записи</li>\
  <li><code>value</code> - функція повертає значення для вибраної комірки таблиці</li>\
  <li><code>format</code> - функція за значенням повертає форматоване\
  <br/>подання значення у вигляді рядка</li>\
  </ul>\
  Приклад агрегатної функції "кількість", яка повертає кількість записів для кожного осередку таблиці:\
  <br/>\
  <br/><code>function(data, rowKey, colKey) {\
  <br/>&nbsp &nbsp return {\
  <br/>&nbsp &nbsp &nbsp &nbsp count: 0,\
  <br/>&nbsp &nbsp &nbsp &nbsp push: function(record) { this.count++; },\
  <br/>&nbsp &nbsp &nbsp &nbsp value: function() { return this.count; },\
  <br/>&nbsp &nbsp &nbsp &nbsp format: function(x) { return x; },\
  <br/>&nbsp &nbsp};\
  <br/>}</code>